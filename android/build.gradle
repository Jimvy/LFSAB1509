def keystoreDebugProperties = new Properties()
keystoreDebugProperties.load(new FileInputStream(rootProject.file("keystore-debug.properties")))
def keystoreReleaseProperties = new Properties()
keystoreReleaseProperties.load(new FileInputStream(rootProject.file("keystore-release.properties")))

android {
    buildToolsVersion "30.0.2"
    compileSdkVersion 30

    sourceSets {
        androidTest.setRoot('tests')

        main {
            aidl.srcDirs = ['src']
            assets.srcDirs = ['assets']
            java.srcDirs = ['src']
            jniLibs.srcDirs = ['libs']
            manifest.srcFile 'AndroidManifest.xml'
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
        }
    }

    signingConfigs {
        debug {
            keyAlias keystoreDebugProperties['keyAlias']
            keyPassword keystoreDebugProperties['keyPassword']
            storeFile file(keystoreDebugProperties['storeFile'])
            storePassword keystoreDebugProperties['storePassword']
        }

        release {
            keyAlias keystoreReleaseProperties['keyAlias']
            keyPassword keystoreReleaseProperties['keyPassword']
            storeFile file(keystoreReleaseProperties['storeFile'])
            storePassword keystoreReleaseProperties['storePassword']
        }
    }

    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId "be.ucl.lfsab1509.gravityrun"
        minSdkVersion 15 // Jelly Bean 4.1.2 API 16, Kitkat API 19, Lollipop API 20
        targetSdkVersion 30
        versionCode 3
        versionName "3.0"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
}

idea {
    module {
        scopes = [COMPILE: [plus: [project.configurations.compile]]]
        sourceDirs += file("src")

        iml {
            withXml {
                def builder = NodeBuilder.newInstance()
                def node = it.asNode()

                builder.current = node

                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}

task copyAndroidNatives() {
    doFirst {
		file("libs/armeabi/").mkdirs()
		file("libs/armeabi-v7a/").mkdirs()
		file("libs/arm64-v8a/").mkdirs()
		file("libs/x86/").mkdirs()
		file("libs/x86_64/").mkdirs()

		configurations.natives.files.each { jar ->
			def outputDir = null

			if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
			if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
			if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
			if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
			if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")

			if (outputDir != null) {
				copy {
					from zipTree(jar)
					into outputDir
					include "*.so"
				}
			}
		}
    }
}

tasks.whenTaskAdded { packageTask ->
	if (packageTask.name.contains("package")) {
		packageTask.dependsOn 'copyAndroidNatives'
	}
}

task run(type: Exec) {
    def localProperties = project.file("../local.properties")
    def path

    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'be.ucl.lfsab1509.gravityrun/be.ucl.lfsab1509.gravityrun.AndroidLauncher'
}
